buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.7.0")
    }
}

plugins {
    id ("java")
    id ("java-library")
    id ("org.springframework.boot")
    id ("io.spring.dependency-management")
    id ("eclipse")
    id ("idea")
    id ("jacoco")
}

group = "com.tourguide"
version = "1.0"
sourceCompatibility = "11"
targetCompatibility = "11"

tasks.named("bootJar") {
    setArchivesBaseName("tourguide")
}

tasks.named("jar") {
    enabled = false
}

repositories {
    mavenCentral()
    flatDir {
        dirs "libs"
    }
}

dependencies {
    implementation project(":CommonSet")
    implementation("org.jetbrains:annotations:23.0.0")
    implementation('org.springframework.boot:spring-boot-starter-web:2.7.0')
    implementation('org.springframework.boot:spring-boot-starter-test:2.7.0')
    implementation("org.apache.maven.plugins:maven-surefire-report-plugin:3.0.0-M6")
    implementation("org.apache.maven.plugins:maven-site-plugin:4.0.0-M1")
    implementation("org.jacoco:org.jacoco.report:0.8.8")
    implementation("org.junit.jupiter:junit-jupiter:5.8.2")

    implementation("com.jsoniter:jsoniter:0.9.23")
    implementation(group: "org.springframework.cloud", name: "spring-cloud-starter-openfeign", version: "3.1.2")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")

    testImplementation("org.junit.jupiter:junit-jupiter:5.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")
    testImplementation(group: "org.springframework.boot", name: "spring-boot-starter-test", version: '2.7.0')
    testImplementation(group: "org.mockito", name: "mockito-junit-jupiter", version: "4.4.0")
}

test {
    useJUnit()
    //seJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.destination file("${buildDir}/jacocoHtml")
    }
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.5
            }
        }
    }
}